// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: subscription.sql

package DB

import (
	"context"
)

const createSubscription = `-- name: CreateSubscription :one
INSERT INTO Subscription (
    s_id,
    plan_type,
    sub_expire_time,
    sub_start_time
) VALUES (
             $1, $2, $3, $4
         )
RETURNING sub_id, s_id, plan_type, sub_expire_time, sub_start_time
`

type CreateSubscriptionParams struct {
	SID           int64  `json:"s_id"`
	PlanType      string `json:"plan_type"`
	SubExpireTime string `json:"sub_expire_time"`
	SubStartTime  string `json:"sub_start_time"`
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, createSubscription,
		arg.SID,
		arg.PlanType,
		arg.SubExpireTime,
		arg.SubStartTime,
	)
	var i Subscription
	err := row.Scan(
		&i.SubID,
		&i.SID,
		&i.PlanType,
		&i.SubExpireTime,
		&i.SubStartTime,
	)
	return i, err
}

const deleteSubscriptionOfAStudent = `-- name: DeleteSubscriptionOfAStudent :exec
DELETE FROM Subscription
WHERE s_id = $1
`

func (q *Queries) DeleteSubscriptionOfAStudent(ctx context.Context, sID int64) error {
	_, err := q.db.ExecContext(ctx, deleteSubscriptionOfAStudent, sID)
	return err
}

const getSubscriptionBySID = `-- name: GetSubscriptionBySID :one
SELECT sub_id, s_id, plan_type, sub_expire_time, sub_start_time FROM Subscription
WHERE s_id = $1
LIMIT 1
`

func (q *Queries) GetSubscriptionBySID(ctx context.Context, sID int64) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionBySID, sID)
	var i Subscription
	err := row.Scan(
		&i.SubID,
		&i.SID,
		&i.PlanType,
		&i.SubExpireTime,
		&i.SubStartTime,
	)
	return i, err
}

const getSubscriptionBySubID = `-- name: GetSubscriptionBySubID :one
SELECT sub_id, s_id, plan_type, sub_expire_time, sub_start_time FROM Subscription
WHERE sub_id = $1
LIMIT 1
`

func (q *Queries) GetSubscriptionBySubID(ctx context.Context, subID int64) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionBySubID, subID)
	var i Subscription
	err := row.Scan(
		&i.SubID,
		&i.SID,
		&i.PlanType,
		&i.SubExpireTime,
		&i.SubStartTime,
	)
	return i, err
}

const updateSubscriptionTime = `-- name: UpdateSubscriptionTime :one
UPDATE Subscription
SET sub_expire_time = $2
WHERE s_id = $1
RETURNING sub_id, s_id, plan_type, sub_expire_time, sub_start_time
`

type UpdateSubscriptionTimeParams struct {
	SID           int64  `json:"s_id"`
	SubExpireTime string `json:"sub_expire_time"`
}

func (q *Queries) UpdateSubscriptionTime(ctx context.Context, arg UpdateSubscriptionTimeParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, updateSubscriptionTime, arg.SID, arg.SubExpireTime)
	var i Subscription
	err := row.Scan(
		&i.SubID,
		&i.SID,
		&i.PlanType,
		&i.SubExpireTime,
		&i.SubStartTime,
	)
	return i, err
}

const updateSubscriptionType = `-- name: UpdateSubscriptionType :one
UPDATE Subscription
SET plan_type = $2
WHERE s_id = $1
RETURNING sub_id, s_id, plan_type, sub_expire_time, sub_start_time
`

type UpdateSubscriptionTypeParams struct {
	SID      int64  `json:"s_id"`
	PlanType string `json:"plan_type"`
}

func (q *Queries) UpdateSubscriptionType(ctx context.Context, arg UpdateSubscriptionTypeParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, updateSubscriptionType, arg.SID, arg.PlanType)
	var i Subscription
	err := row.Scan(
		&i.SubID,
		&i.SID,
		&i.PlanType,
		&i.SubExpireTime,
		&i.SubStartTime,
	)
	return i, err
}
