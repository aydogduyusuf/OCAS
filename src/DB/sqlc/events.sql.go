// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: events.sql

package DB

import (
	"context"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO Events (
    c_id,
    start_time,
    end_time,
    title,
    color
) VALUES (
             $1, $2, $3, $4, $5
         )
RETURNING e_id, c_id, start_time, end_time, title, color
`

type CreateEventParams struct {
	CID       int64  `json:"c_id"`
	StartTime string `json:"start_time"`
	EndTime   string `json:"end_time"`
	Title     string `json:"title"`
	Color     string `json:"color"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent,
		arg.CID,
		arg.StartTime,
		arg.EndTime,
		arg.Title,
		arg.Color,
	)
	var i Event
	err := row.Scan(
		&i.EID,
		&i.CID,
		&i.StartTime,
		&i.EndTime,
		&i.Title,
		&i.Color,
	)
	return i, err
}

const deleteEventOfACourse = `-- name: DeleteEventOfACourse :exec
DELETE FROM Events
WHERE e_id = $1
`

func (q *Queries) DeleteEventOfACourse(ctx context.Context, eID int64) error {
	_, err := q.db.ExecContext(ctx, deleteEventOfACourse, eID)
	return err
}

const getEventByEventID = `-- name: GetEventByEventID :one
SELECT e_id, c_id, start_time, end_time, title, color FROM Events
WHERE e_id = $1
LIMIT 1
`

func (q *Queries) GetEventByEventID(ctx context.Context, eID int64) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEventByEventID, eID)
	var i Event
	err := row.Scan(
		&i.EID,
		&i.CID,
		&i.StartTime,
		&i.EndTime,
		&i.Title,
		&i.Color,
	)
	return i, err
}

const getEventsByCourseID = `-- name: GetEventsByCourseID :many
SELECT e_id, c_id, start_time, end_time, title, color FROM Events
WHERE c_id = $1
ORDER BY start_time
`

func (q *Queries) GetEventsByCourseID(ctx context.Context, cID int64) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEventsByCourseID, cID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.EID,
			&i.CID,
			&i.StartTime,
			&i.EndTime,
			&i.Title,
			&i.Color,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEventColor = `-- name: UpdateEventColor :one
UPDATE Events
SET color = $2
WHERE e_id = $1
RETURNING e_id, c_id, start_time, end_time, title, color
`

type UpdateEventColorParams struct {
	EID   int64  `json:"e_id"`
	Color string `json:"color"`
}

func (q *Queries) UpdateEventColor(ctx context.Context, arg UpdateEventColorParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, updateEventColor, arg.EID, arg.Color)
	var i Event
	err := row.Scan(
		&i.EID,
		&i.CID,
		&i.StartTime,
		&i.EndTime,
		&i.Title,
		&i.Color,
	)
	return i, err
}

const updateEventEndTime = `-- name: UpdateEventEndTime :one
UPDATE Events
SET end_time = $2
WHERE e_id = $1
RETURNING e_id, c_id, start_time, end_time, title, color
`

type UpdateEventEndTimeParams struct {
	EID     int64  `json:"e_id"`
	EndTime string `json:"end_time"`
}

func (q *Queries) UpdateEventEndTime(ctx context.Context, arg UpdateEventEndTimeParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, updateEventEndTime, arg.EID, arg.EndTime)
	var i Event
	err := row.Scan(
		&i.EID,
		&i.CID,
		&i.StartTime,
		&i.EndTime,
		&i.Title,
		&i.Color,
	)
	return i, err
}

const updateEventStartTime = `-- name: UpdateEventStartTime :one
UPDATE Events
SET start_time = $2
WHERE e_id = $1
RETURNING e_id, c_id, start_time, end_time, title, color
`

type UpdateEventStartTimeParams struct {
	EID       int64  `json:"e_id"`
	StartTime string `json:"start_time"`
}

func (q *Queries) UpdateEventStartTime(ctx context.Context, arg UpdateEventStartTimeParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, updateEventStartTime, arg.EID, arg.StartTime)
	var i Event
	err := row.Scan(
		&i.EID,
		&i.CID,
		&i.StartTime,
		&i.EndTime,
		&i.Title,
		&i.Color,
	)
	return i, err
}

const updateEventTitle = `-- name: UpdateEventTitle :one
UPDATE Events
SET title = $2
WHERE e_id = $1
RETURNING e_id, c_id, start_time, end_time, title, color
`

type UpdateEventTitleParams struct {
	EID   int64  `json:"e_id"`
	Title string `json:"title"`
}

func (q *Queries) UpdateEventTitle(ctx context.Context, arg UpdateEventTitleParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, updateEventTitle, arg.EID, arg.Title)
	var i Event
	err := row.Scan(
		&i.EID,
		&i.CID,
		&i.StartTime,
		&i.EndTime,
		&i.Title,
		&i.Color,
	)
	return i, err
}
