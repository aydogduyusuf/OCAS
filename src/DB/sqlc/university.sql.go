// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: university.sql

package DB

import (
	"context"
)

const createUniversity = `-- name: CreateUniversity :one
INSERT INTO University(
    university_name,
    abbreviation,
    email_extension,
    country,
    city,
    street
)
VALUES ( $1, $2, $3, $4, $5, $6 )
RETURNING u_id, university_name, abbreviation, email_extension, country, city, street
`

type CreateUniversityParams struct {
	UniversityName string `json:"university_name"`
	Abbreviation   string `json:"abbreviation"`
	EmailExtension string `json:"email_extension"`
	Country        string `json:"country"`
	City           string `json:"city"`
	Street         string `json:"street"`
}

func (q *Queries) CreateUniversity(ctx context.Context, arg CreateUniversityParams) (University, error) {
	row := q.db.QueryRowContext(ctx, createUniversity,
		arg.UniversityName,
		arg.Abbreviation,
		arg.EmailExtension,
		arg.Country,
		arg.City,
		arg.Street,
	)
	var i University
	err := row.Scan(
		&i.UID,
		&i.UniversityName,
		&i.Abbreviation,
		&i.EmailExtension,
		&i.Country,
		&i.City,
		&i.Street,
	)
	return i, err
}

const getAllUniversities = `-- name: GetAllUniversities :many
SELECT u_id, university_name, abbreviation, email_extension, country, city, street FROM University
`

func (q *Queries) GetAllUniversities(ctx context.Context) ([]University, error) {
	rows, err := q.db.QueryContext(ctx, getAllUniversities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []University{}
	for rows.Next() {
		var i University
		if err := rows.Scan(
			&i.UID,
			&i.UniversityName,
			&i.Abbreviation,
			&i.EmailExtension,
			&i.Country,
			&i.City,
			&i.Street,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUniversity = `-- name: GetUniversity :one
SELECT u_id, university_name, abbreviation, email_extension, country, city, street FROM University
WHERE u_id = $1
LIMIT 1
`

func (q *Queries) GetUniversity(ctx context.Context, uID int64) (University, error) {
	row := q.db.QueryRowContext(ctx, getUniversity, uID)
	var i University
	err := row.Scan(
		&i.UID,
		&i.UniversityName,
		&i.Abbreviation,
		&i.EmailExtension,
		&i.Country,
		&i.City,
		&i.Street,
	)
	return i, err
}

const getUniversityByName = `-- name: GetUniversityByName :one
SELECT u_id, university_name, abbreviation, email_extension, country, city, street FROM University
WHERE university_name = $1
LIMIT 1
`

func (q *Queries) GetUniversityByName(ctx context.Context, universityName string) (University, error) {
	row := q.db.QueryRowContext(ctx, getUniversityByName, universityName)
	var i University
	err := row.Scan(
		&i.UID,
		&i.UniversityName,
		&i.Abbreviation,
		&i.EmailExtension,
		&i.Country,
		&i.City,
		&i.Street,
	)
	return i, err
}
