// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: addresses.sql

package DB

import (
	"context"
)

const createAddresses = `-- name: CreateAddresses :one
INSERT INTO Addresses (
    country, city, street
) VALUES (
    $1, $2, $3
)
RETURNING country, city, street
`

type CreateAddressesParams struct {
	Country string `json:"country"`
	City    string `json:"city"`
	Street  string `json:"street"`
}

func (q *Queries) CreateAddresses(ctx context.Context, arg CreateAddressesParams) (Address, error) {
	row := q.db.QueryRowContext(ctx, createAddresses, arg.Country, arg.City, arg.Street)
	var i Address
	err := row.Scan(&i.Country, &i.City, &i.Street)
	return i, err
}

const getAddress = `-- name: GetAddress :one
SELECT country, city, street from Addresses
WHERE country = $1 AND city = $2 AND street = $3
LIMIT 1
`

type GetAddressParams struct {
	Country string `json:"country"`
	City    string `json:"city"`
	Street  string `json:"street"`
}

func (q *Queries) GetAddress(ctx context.Context, arg GetAddressParams) (Address, error) {
	row := q.db.QueryRowContext(ctx, getAddress, arg.Country, arg.City, arg.Street)
	var i Address
	err := row.Scan(&i.Country, &i.City, &i.Street)
	return i, err
}

const getAddressesByCountry = `-- name: GetAddressesByCountry :many
SELECT country, city, street from Addresses
WHERE country = $1
ORDER BY country
`

func (q *Queries) GetAddressesByCountry(ctx context.Context, country string) ([]Address, error) {
	rows, err := q.db.QueryContext(ctx, getAddressesByCountry, country)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Address{}
	for rows.Next() {
		var i Address
		if err := rows.Scan(&i.Country, &i.City, &i.Street); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
