// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: student_courses.sql

package DB

import (
	"context"
)

const createStudentCourses = `-- name: CreateStudentCourses :one
INSERT INTO Student_Courses (
    s_id,
    c_id
) VALUES (
          $1, $2
)
RETURNING s_id, c_id
`

type CreateStudentCoursesParams struct {
	SID int64 `json:"s_id"`
	CID int64 `json:"c_id"`
}

func (q *Queries) CreateStudentCourses(ctx context.Context, arg CreateStudentCoursesParams) (StudentCourse, error) {
	row := q.db.QueryRowContext(ctx, createStudentCourses, arg.SID, arg.CID)
	var i StudentCourse
	err := row.Scan(&i.SID, &i.CID)
	return i, err
}

const deleteCoursesOfAStudent = `-- name: DeleteCoursesOfAStudent :exec
DELETE FROM Student_Courses
WHERE s_id = $1
`

func (q *Queries) DeleteCoursesOfAStudent(ctx context.Context, sID int64) error {
	_, err := q.db.ExecContext(ctx, deleteCoursesOfAStudent, sID)
	return err
}

const getCoursesOfAStudent = `-- name: GetCoursesOfAStudent :many
SELECT s_id, c_id FROM Student_Courses
WHERE s_id = $1
`

func (q *Queries) GetCoursesOfAStudent(ctx context.Context, sID int64) ([]StudentCourse, error) {
	rows, err := q.db.QueryContext(ctx, getCoursesOfAStudent, sID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StudentCourse{}
	for rows.Next() {
		var i StudentCourse
		if err := rows.Scan(&i.SID, &i.CID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentCourse = `-- name: GetStudentCourse :one
SELECT s_id, c_id FROM Student_Courses
WHERE s_id = $1 and c_id = $2
LIMIT 1
`

type GetStudentCourseParams struct {
	SID int64 `json:"s_id"`
	CID int64 `json:"c_id"`
}

func (q *Queries) GetStudentCourse(ctx context.Context, arg GetStudentCourseParams) (StudentCourse, error) {
	row := q.db.QueryRowContext(ctx, getStudentCourse, arg.SID, arg.CID)
	var i StudentCourse
	err := row.Scan(&i.SID, &i.CID)
	return i, err
}

const getStudentsOfACourse = `-- name: GetStudentsOfACourse :many
SELECT s_id, c_id FROM Student_Courses
WHERE c_id = $1
`

func (q *Queries) GetStudentsOfACourse(ctx context.Context, cID int64) ([]StudentCourse, error) {
	rows, err := q.db.QueryContext(ctx, getStudentsOfACourse, cID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StudentCourse{}
	for rows.Next() {
		var i StudentCourse
		if err := rows.Scan(&i.SID, &i.CID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
